%% UCLA Rocket Project 2025
%  Ares Engine - Regenerative Cooling Design and Simulation

clc; close all; clear;

%% Notes
% - This script functions with two options: Engine geometry is either
% imported as a text file, or generated by the script itself.
% - All units are marked, and should be assumed to be in SI unless 
% otherwise stated.
% - Sources for any non-trivial formulae/relations are cited at the bottom
% of each function, and can be found in the accompanying 'References'
% folder.
% - If designing a new engine, the geometry will be automatically exported
% to data.txt, possibly overwriting any earlier inputs.

%% Inputs

% True designs the engine geometry.
% False loads a given geometry in the data.txt file.
Parameter.design = true;

% Flow parameters for pre-defined geometry.
if Parameter.design == false
    Parameter.mass_flow           = 3.0; % kg/s
    Parameter.O_F_ratio           = 1.5; 
    Parameter.chamber_pressure    = 412.7;    % psia
    Parameter.ambient_pressure    = 12.7;   % psia
    Parameter.fuel_ratio       = 1;
    Parameter.T                   = 300;    % K
    Parameter.fuel_CEA          = 'RP-1';
    Parameter.fuel              = 'n-Dodecane';
    load('data.txt');
end

% Parameters to design a new engine.
if Parameter.design == true
    Parameter.O_F_ratio           = 2.35;
    Parameter.chamber_pressure    = 412.7;  % psia
    Parameter.ambient_pressure    = 12.7;   % psia
    Parameter.exit_diameter       = 4.5692;
    Parameter.fuel_ratio          = 1;
    Parameter.T                   = 298.15;    % K
    Parameter.thrust              = 5000/3;%1800;   % lbf
    Geometry.chamber_diameter     = 3.75;    % in
    Geometry.conv_angle           = 40;     % deg
    Parameter.L_star              = 30;     % in
    Parameter.resolution          = 500;
    Parameter.fuel_CEA            = 'RP-1';
    Parameter.fuel                = 'n-Dodecane';
end

Parameter.knockdown = 1;

%                                    exit    throat  conv    chamber
Geometry.channel_height           = [0.0015   0.001   0.00175   0.00175]; % m
Geometry.rib_width                = [0.001   0.001   0.001   0.001  ]; % m                    
Geometry.inner_wall_thickness     = [0.001   0.001   0.001   0.001  ]; % m
Geometry.outer_wall_thickness     = [0.002   0.0015  0.0015  0.0015 ]; % m
Geometry.minimum_channel_width    = 0.001;                             % m
Geometry.fillet                   = 0.00025;                         % m radius

Geometry.pitch                   = 15;          % deg
Parameter.C_star_efficiency      = 0.9;
Parameter.C_F_efficiency         = 0.95;
Parameter.ambient_temperature    = 300;         % K
Parameter.res                    = 0;%0.00005/1;   % thickness/conductivity (SI)
Parameter.roughness              = 1.90e-5;      % m

Parameter.material               = 'aluminum';


%% Conversions

Parameter.chamber_pressure = Parameter.chamber_pressure*6894.76;
Parameter.ambient_pressure = Parameter.ambient_pressure*6894.76;

if Parameter.design == false
    Geometry.axial_distance = data(:,1)';
    Geometry.diameter = data(:,2)';
    Geometry.exit_area = pi*(Geometry.diameter(1)/2)^2;
    Geometry.throat_area = pi*(min(Geometry.diameter)/2)^2;
    Parameter.resolution = length(Geometry.diameter);
else
    Parameter.thrust = Parameter.thrust*4.44822;    % N
    Geometry.chamber_diameter = Geometry.chamber_diameter*0.0254; % m
    Parameter.L_star = Parameter.L_star*0.0254; % m
    Parameter.exit_diameter = Parameter.exit_diameter*0.0254;
end

%% CEA
fprintf('CEA            ')
[Parameter,Geometry,Gas] = runCEA(Parameter,Geometry);
fprintf('...Complete\n')

Parameter.Isp = Parameter.thrust_coefficient  *Parameter.C_F_efficiency*Parameter.C_star_efficiency* Parameter.characteristic_velocity/9.81

temp = Gas.throat_temperature*0.9^2
thrust = Parameter.thrust/4.448

%% Geometry

fprintf('Geometry       ')
[Parameter,Geometry,Gas] = runGeometry(Parameter,Geometry,Gas);
fprintf('...Complete\n')

% Automatically exports generated geometry to data.txt
writematrix([Geometry.axial_distance' Geometry.diameter'],'data.txt','Delimiter',',')  
%writematrix([Geometry.diameter/2],'data.txt','Delimiter',',') 


fprintf('Figures        ')

%% Figure 1: Plot of engine contour.

figure(1)
title('Engine Geometry')
hold on
plot(Geometry.axial_distance,Geometry.diameter/2,'k')
plot(Geometry.axial_distance,Geometry.diameter/2+Geometry.inner_wall_thickness,'k')
plot(Geometry.axial_distance,Geometry.diameter/2+Geometry.inner_wall_thickness+Geometry.channel_height,'k')
plot(Geometry.axial_distance,Geometry.diameter/2+Geometry.inner_wall_thickness+Geometry.channel_height+Geometry.outer_wall_thickness,'k')
plot(Geometry.axial_distance,-Geometry.diameter/2,'k')
plot(Geometry.axial_distance,-Geometry.diameter/2-Geometry.inner_wall_thickness,'k')
plot(Geometry.axial_distance,-Geometry.diameter/2-Geometry.inner_wall_thickness-Geometry.channel_height,'k')
plot(Geometry.axial_distance,-Geometry.diameter/2-Geometry.inner_wall_thickness-Geometry.channel_height-Geometry.outer_wall_thickness,'k')
yline(12/(2*sqrt(3)/3+1)*0.0254/2)
yline(-12/(2*sqrt(3)/3+1)*0.0254/2)
hold off
axis equal
grid on
xlabel('Axial Distance (m)')
ylabel('Radial Distance (m)')

%% Figure 2: Plot of 4 channel cross-sections.

figure(2)
t = tiledlayout(2,2);
title(t,'Channel Cross-Sections')
nexttile
title('Exit')
for i=1:Geometry.channel_number
hg(i) = hgtransform;
rectangle('parent',hg(i),'Position',[-Geometry.channel_width(Geometry.stations(1))/2,0,Geometry.channel_width(Geometry.stations(1)),Geometry.channel_height(Geometry.stations(1))],'Curvature',[Geometry.fillet/(0.5*Geometry.channel_width(Geometry.stations(1))),Geometry.fillet/(0.5*Geometry.channel_height(Geometry.stations(1)))])
hg(i).Matrix = makehgtform('translate',[-(Geometry.diameter(Geometry.stations(1))/2+Geometry.inner_wall_thickness(Geometry.stations(1)))*sind((i-21)*360/Geometry.channel_number),-(Geometry.diameter(Geometry.stations(1))/2+Geometry.inner_wall_thickness(Geometry.stations(1)))*(1-cosd((i-21)*360/Geometry.channel_number)),0]);
hg(i).Matrix = hg(i).Matrix*makehgtform('zrotate',2*pi*(i-21)/Geometry.channel_number);
end
rectangle('Position',[-Geometry.diameter(Geometry.stations(1))/2,-Geometry.diameter(Geometry.stations(1))-Geometry.inner_wall_thickness(Geometry.stations(1)),Geometry.diameter(Geometry.stations(1)),Geometry.diameter(Geometry.stations(1))],'Curvature',[1,1])
rectangle('Position',[-Geometry.diameter(Geometry.stations(1))/2-Geometry.inner_wall_thickness(Geometry.stations(1))-Geometry.channel_height(Geometry.stations(1))-Geometry.outer_wall_thickness(Geometry.stations(1)),-Geometry.diameter(Geometry.stations(1))-2*Geometry.inner_wall_thickness(Geometry.stations(1))-Geometry.channel_height(Geometry.stations(1))-Geometry.outer_wall_thickness(Geometry.stations(1)),Geometry.diameter(Geometry.stations(1))+2*Geometry.inner_wall_thickness(Geometry.stations(1))+2*Geometry.channel_height(Geometry.stations(1))+2*Geometry.outer_wall_thickness(Geometry.stations(1)),Geometry.diameter(Geometry.stations(1))+2*Geometry.inner_wall_thickness(Geometry.stations(1))+2*Geometry.channel_height(Geometry.stations(1))+2*Geometry.outer_wall_thickness(Geometry.stations(1))],'Curvature',[1,1])
axis equal
grid on
ylim([-5*Geometry.channel_height(Geometry.stations(1)),5*Geometry.channel_height(Geometry.stations(1))])
nexttile
title('Throat')
for i=1:Geometry.channel_number
hg(i) = hgtransform;
rectangle('parent',hg(i),'Position',[-Geometry.channel_width(Geometry.stations(2))/2,0,Geometry.channel_width(Geometry.stations(2)),Geometry.channel_height(Geometry.stations(2))],'Curvature',[Geometry.fillet/(0.5*Geometry.channel_width(Geometry.stations(2))),Geometry.fillet/(0.5*Geometry.channel_height(Geometry.stations(2)))])
hg(i).Matrix = makehgtform('translate',[-(Geometry.diameter(Geometry.stations(2))/2+Geometry.inner_wall_thickness(Geometry.stations(2)))*sind((i-21)*360/Geometry.channel_number),-(Geometry.diameter(Geometry.stations(2))/2+Geometry.inner_wall_thickness(Geometry.stations(2)))*(1-cosd((i-21)*360/Geometry.channel_number)),0]);
hg(i).Matrix = hg(i).Matrix*makehgtform('zrotate',2*pi*(i-21)/Geometry.channel_number);
end
rectangle('Position',[-Geometry.diameter(Geometry.stations(2))/2,-Geometry.diameter(Geometry.stations(2))-Geometry.inner_wall_thickness(Geometry.stations(2)),Geometry.diameter(Geometry.stations(2)),Geometry.diameter(Geometry.stations(2))],'Curvature',[1,1])
rectangle('Position',[-Geometry.diameter(Geometry.stations(2))/2-Geometry.inner_wall_thickness(Geometry.stations(2))-Geometry.channel_height(Geometry.stations(2))-Geometry.outer_wall_thickness(Geometry.stations(2)),-Geometry.diameter(Geometry.stations(2))-2*Geometry.inner_wall_thickness(Geometry.stations(2))-Geometry.channel_height(Geometry.stations(2))-Geometry.outer_wall_thickness(Geometry.stations(2)),Geometry.diameter(Geometry.stations(2))+2*Geometry.inner_wall_thickness(Geometry.stations(2))+2*Geometry.channel_height(Geometry.stations(2))+2*Geometry.outer_wall_thickness(Geometry.stations(2)),Geometry.diameter(Geometry.stations(2))+2*Geometry.inner_wall_thickness(Geometry.stations(2))+2*Geometry.channel_height(Geometry.stations(2))+2*Geometry.outer_wall_thickness(Geometry.stations(2))],'Curvature',[1,1])
axis equal
grid on
ylim([-5*Geometry.channel_height(Geometry.stations(1)),5*Geometry.channel_height(Geometry.stations(1))])
nexttile
title('Converging')
for i=1:Geometry.channel_number
hg(i) = hgtransform;
rectangle('parent',hg(i),'Position',[-Geometry.channel_width(Geometry.stations(3))/2,0,Geometry.channel_width(Geometry.stations(3)),Geometry.channel_height(Geometry.stations(3))],'Curvature',[Geometry.fillet/(0.5*Geometry.channel_width(Geometry.stations(3))),Geometry.fillet/(0.5*Geometry.channel_height(Geometry.stations(3)))])
hg(i).Matrix = makehgtform('translate',[-(Geometry.diameter(Geometry.stations(3))/2+Geometry.inner_wall_thickness(Geometry.stations(3)))*sind((i-21)*360/Geometry.channel_number),-(Geometry.diameter(Geometry.stations(3))/2+Geometry.inner_wall_thickness(Geometry.stations(3)))*(1-cosd((i-21)*360/Geometry.channel_number)),0]);
hg(i).Matrix = hg(i).Matrix*makehgtform('zrotate',2*pi*(i-21)/Geometry.channel_number);
end
rectangle('Position',[-Geometry.diameter(Geometry.stations(3))/2,-Geometry.diameter(Geometry.stations(3))-Geometry.inner_wall_thickness(Geometry.stations(3)),Geometry.diameter(Geometry.stations(3)),Geometry.diameter(Geometry.stations(3))],'Curvature',[1,1])
rectangle('Position',[-Geometry.diameter(Geometry.stations(3))/2-Geometry.inner_wall_thickness(Geometry.stations(3))-Geometry.channel_height(Geometry.stations(3))-Geometry.outer_wall_thickness(Geometry.stations(3)),-Geometry.diameter(Geometry.stations(3))-2*Geometry.inner_wall_thickness(Geometry.stations(3))-Geometry.channel_height(Geometry.stations(3))-Geometry.outer_wall_thickness(Geometry.stations(3)),Geometry.diameter(Geometry.stations(3))+2*Geometry.inner_wall_thickness(Geometry.stations(3))+2*Geometry.channel_height(Geometry.stations(3))+2*Geometry.outer_wall_thickness(Geometry.stations(3)),Geometry.diameter(Geometry.stations(3))+2*Geometry.inner_wall_thickness(Geometry.stations(3))+2*Geometry.channel_height(Geometry.stations(3))+2*Geometry.outer_wall_thickness(Geometry.stations(3))],'Curvature',[1,1])
axis equal
grid on
ylim([-5*Geometry.channel_height(Geometry.stations(1)),5*Geometry.channel_height(Geometry.stations(1))])
nexttile
title('Injector')
for i=1:Geometry.channel_number
hg(i) = hgtransform;
rectangle('parent',hg(i),'Position',[-Geometry.channel_width(Geometry.stations(4))/2,0,Geometry.channel_width(Geometry.stations(4)),Geometry.channel_height(Geometry.stations(4))],'Curvature',[Geometry.fillet/(0.5*Geometry.channel_width(Geometry.stations(4))),Geometry.fillet/(0.5*Geometry.channel_height(Geometry.stations(4)))])
hg(i).Matrix = makehgtform('translate',[-(Geometry.diameter(Geometry.stations(4))/2+Geometry.inner_wall_thickness(Geometry.stations(4)))*sind((i-21)*360/Geometry.channel_number),-(Geometry.diameter(Geometry.stations(4))/2+Geometry.inner_wall_thickness(Geometry.stations(4)))*(1-cosd((i-21)*360/Geometry.channel_number)),0]);
hg(i).Matrix = hg(i).Matrix*makehgtform('zrotate',2*pi*(i-21)/Geometry.channel_number);
end
rectangle('Position',[-Geometry.diameter(Geometry.stations(4))/2,-Geometry.diameter(Geometry.stations(4))-Geometry.inner_wall_thickness(Geometry.stations(4)),Geometry.diameter(Geometry.stations(4)),Geometry.diameter(Geometry.stations(4))],'Curvature',[1,1])
rectangle('Position',[-Geometry.diameter(Geometry.stations(4))/2-Geometry.inner_wall_thickness(Geometry.stations(4))-Geometry.channel_height(Geometry.stations(4))-Geometry.outer_wall_thickness(Geometry.stations(4)),-Geometry.diameter(Geometry.stations(4))-2*Geometry.inner_wall_thickness(Geometry.stations(4))-Geometry.channel_height(Geometry.stations(4))-Geometry.outer_wall_thickness(Geometry.stations(4)),Geometry.diameter(Geometry.stations(4))+2*Geometry.inner_wall_thickness(Geometry.stations(4))+2*Geometry.channel_height(Geometry.stations(4))+2*Geometry.outer_wall_thickness(Geometry.stations(4)),Geometry.diameter(Geometry.stations(4))+2*Geometry.inner_wall_thickness(Geometry.stations(4))+2*Geometry.channel_height(Geometry.stations(4))+2*Geometry.outer_wall_thickness(Geometry.stations(4))],'Curvature',[1,1])
axis equal
grid on
ylim([-5*Geometry.channel_height(Geometry.stations(1)),5*Geometry.channel_height(Geometry.stations(1))])
fprintf('...Complete\n')

%% Isentropic Calculations

fprintf('Isentropic     ')
[Parameter,Geometry,Gas] = runIsentropic(Parameter,Geometry,Gas);
fprintf('...Complete\n')

%% Heat Transfer

fprintf('Heat Transfer  ')
[Parameter,Geometry,Gas,Coolant,Thermal] = runHeatTransfer(Parameter,Geometry,Gas);
fprintf('Complete\n')

%% Stress

[~,Stress.inner_wall_youngs_modulus,Stress.inner_wall_poisson_ratio,Stress.inner_wall_cte,~,Stress.inner_wall_yield] = materialProperties(Thermal.inner_temperature(1,:),Parameter.material);
Stress.inner_wall_hoop = abs(Gas.static_pressure-Coolant.static_pressure)*0.5.*(Geometry.diameter+Geometry.inner_wall_thickness)./Geometry.inner_wall_thickness;
Stress.inner_wall_bending = abs(Gas.static_pressure-Coolant.static_pressure).*(Geometry.channel_width/Geometry.inner_wall_thickness).^2;
Stress.inner_wall_thermal = Stress.inner_wall_cte .* abs(Thermal.inner_wall_temperature(1,:)-Thermal.inner_channel_temperature(1,:)).*Stress.inner_wall_youngs_modulus./(2*(1-Stress.inner_wall_poisson_ratio));
Stress.inner_wall = Stress.inner_wall_hoop + Stress.inner_wall_bending + Stress.inner_wall_thermal;

%% Export

curveHelper(Geometry.diameter, Geometry.inner_wall_thickness, Geometry.channel_height, Geometry.outer_wall_thickness, Geometry.axial_distance, Geometry.dtheta, Geometry.psi, Geometry.rib_width, Geometry.channel_width, Geometry.channel_number)

%% Figure 3: Wall Temperatures.

figure(3)
title('Engine Wall Temperatures')
hold on
plot(Geometry.axial_distance,Thermal.coating_temperature(1,:),'LineWidth',2)
plot(Geometry.axial_distance,Thermal.inner_wall_temperature(1,:),'LineWidth',2)
plot(Geometry.axial_distance,Thermal.inner_temperature(1,:),'LineWidth',2)
plot(Geometry.axial_distance,Thermal.inner_channel_temperature(1,:),'LineWidth',2)
hold off
legend('Thermal Coating','Inner Wall (gas side)','Inner Wall','Channel Wall')
xlabel('Axial Distance (m)')
ylabel('Temperature (K)')
grid on

%% Figure 4: Heat Flux.

figure(4)
title('Heat Flux')
hold on
plot(Geometry.axial_distance,Thermal.heat_flux,'b','LineWidth',2)
plot(Geometry.axial_distance,Thermal.critical_heat_flux,'r','LineWidth',2,'LineStyle','--')
hold off
legend('Heat Flux','Critical Heat Flux')
xlabel('Axial Distance (m)')
ylabel('Heat Flux (W/m-K)')
grid on

%% Figure 5: Coolant Temperature.

figure(5)
title('Coolant Temperature')
hold on
plot(Geometry.axial_distance,Coolant.temperature(1:end-1),'r','LineWidth',2)
hold off
xlabel('Axial Distance (m)')
ylabel('Temperature (K)')
grid on

%% Figure 6: Coolant Pressure.

figure(6)
title('Coolant Pressure')
hold on
plot(Geometry.axial_distance,Coolant.total_pressure(1:end-1)/6894.76,'LineWidth',2)
plot(Geometry.axial_distance,Coolant.static_pressure/6894.76,'LineWidth',2)
hold off
legend('Total (Stagnation) Pressure','Static Pressure')
xlabel('Axial Distance (m)')
ylabel('Pressure (psi)')
grid on

%% Figure 7: Inner Wall Stress.

figure(7)
title('Inner Wall Stress')
hold on
plot(Geometry.axial_distance,Stress.inner_wall/6895000,'LineWidth',2)
plot(Geometry.axial_distance,Stress.inner_wall_hoop/6895000)
plot(Geometry.axial_distance,Stress.inner_wall_bending/6895000)
plot(Geometry.axial_distance,Stress.inner_wall_thermal/6895000)
plot(Geometry.axial_distance,Stress.inner_wall_yield/6895000,'LineStyle','--','LineWidth',2)
hold off
legend('Total Stress','hoop','bend','thermal','Yield Strength')
xlabel('Axial Distance (m)')
ylabel('Stress (ksi)')
grid on

CdA = Parameter.fuel_mass_flow/(sqrt(2*Coolant.density(1)*(Coolant.total_pressure(1)-Coolant.total_pressure(end))))/(0.0254^2)

h_g_avg = 0.5*(Thermal.h_g(1,:)+Thermal.h_g(2,:))'
hc_avg = Thermal.h_c'
y = Geometry.axial_distance'

figure
hold on
plot(y,h_g_avg)
plot(y,hc_avg)

P_chamber = Gas.static_pressure'
P_channel = Coolant.static_pressure'

figure
hold on
plot(y,P_chamber)
plot(y,P_channel)

T_hotwall = Gas.adiabatic_wall_temperature'-273.15
T_coolant = Coolant.temperature(1:end-1)'-273.15

T_wall = Thermal.inner_wall_temperature(1,:)'-273.15

figure
hold on
plot(y,T_hotwall)
plot(y,T_coolant)

thickness = 0.0001;
k = (thickness./Gas.resistance);
